<Rat25S> -> $$ <Opt Function Definitions> $$ <Opt Declaration List> $$ <Statement List> $$
Token: Separator Lexeme: $$
<Opt Function Definitions> -> <Function Definitions>
<Function Definitions> -> <Function> | <Function> <Function Definitions>
<Function> -> function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Token: Keyword Lexeme: function
Token: Identifier Lexeme: convertx
Token: Separator Lexeme: (
<Opt Parameter List> -> <Parameter List>
<Parameter List> -> <Parameter> <Parameter List'>
<Parameter> -> <IDs> <Qualifier>
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: fahr
<IDS'> -> <Empty>
<Empty> -> ε
<Qualifier> -> integer
Token: Keyword Lexeme: integer
<Parameter List'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: )
<Opt Declaration List> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: {
<Statement List> -> <Statement> <Statement List'>
<Statement> -> <Return>
<Return> -> return <Return'>
Token: Keyword Lexeme: return
<Return'> -> <Expression> ;
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
Token: Integer Lexeme: 5
<Term'> -> * <Factor> <Term'>
Token: Operator Lexeme: *
<Factor> -> <Primary>
<Primary> -> ( <Expression> )
Token: Separator Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary'>
Token: Identifier Lexeme: fahr
<Primary'> -> <Empty>
<Empty> -> ε
<TermPrime> -> <Empty>
<Empty> -> ε
Token: Operator Lexeme: -
<Expression Prime> -> - <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Integer>
Token: Integer Lexeme: 32
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: )
<Term'> -> / <Factor> <Term'>
Token: Operator Lexeme: /
<Factor> -> <Primary>
<Primary> -> <Integer>
Token: Integer Lexeme: 9
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: ;
<Statement List'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: }
<Function Definitions'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: $$
<Opt Declaration List> -> <Declaration List>
<Declaration List> -> <Declaration> ; <Declaration List'>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer
Token: Keyword Lexeme: integer
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: low
<IDS'> -> , <IDS>
Token: Separator Lexeme: ,
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: high
<IDS'> -> , <IDS>
Token: Separator Lexeme: ,
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: step
<IDS'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: ;
<Declaration List'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: $$
<Statement List> -> <Statement> <Statement List'>
<Statement> -> <Scan>
<Scan> -> ( <IDs> );
Token: Keyword Lexeme: scan
Token: Separator Lexeme: (
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: low
<IDS'> -> , <IDS>
Token: Separator Lexeme: ,
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: high
<IDS'> -> , <IDS>
Token: Separator Lexeme: ,
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: step
<IDS'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: )
Token: Separator Lexeme: ;
<Statement List'> -> <Statement List>
<Statement List> -> <Statement> <Statement List'>
<Statement> -> <While>
<While> -> while ( <Condition> ) <Statement> endwhile
Token: Keyword Lexeme: while
Token: Separator Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary'>
Token: Identifier Lexeme: low
<Primary'> -> <Empty>
<Empty> -> ε
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
<Relop> -> <=
Token: Operator Lexeme: <=
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary'>
Token: Identifier Lexeme: high
<Primary'> -> <Empty>
<Empty> -> ε
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: )
<Statement> -> <Compound>
<Compound> -> { <Statement List> }
Token: Separator Lexeme: {
<Statement List> -> <Statement> <Statement List'>
<Statement> -> <Print>
<Print> -> print ( <Expression> );
Token: Keyword Lexeme: print
Token: Separator Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary'>
Token: Identifier Lexeme: low
<Primary'> -> <Empty>
<Empty> -> ε
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: )
Token: Separator Lexeme: ;
<Statement List'> -> <Statement List>
<Statement List> -> <Statement> <Statement List'>
<Statement> -> <Print>
<Print> -> print ( <Expression> );
Token: Keyword Lexeme: print
Token: Separator Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary'>
Token: Identifier Lexeme: convertx
<Primary'> -> ( IDS )
Token: Separator Lexeme: (
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: low
<IDS'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: )
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: )
Token: Separator Lexeme: ;
<Statement List'> -> <Statement List>
<Statement List> -> <Statement> <Statement List'>
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
Token: Identifier Lexeme: low
Token: Operator Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary'>
Token: Identifier Lexeme: low
<Primary'> -> <Empty>
<Empty> -> ε
<TermPrime> -> <Empty>
<Empty> -> ε
Token: Operator Lexeme: +
<Expression Prime> -> + <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary'>
Token: Identifier Lexeme: step
<Primary'> -> <Empty>
<Empty> -> ε
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: ;
<Statement List'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: }
Token: Keyword Lexeme: endwhile
<Statement List'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: $$
