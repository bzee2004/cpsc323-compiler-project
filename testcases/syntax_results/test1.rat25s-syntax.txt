<Rat25S> -> $$ <Opt Function Definitions> $$ <Opt Declaration List> $$ <Statement List> $$
Token: Separator Lexeme: $$
<Opt Function Definitions> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: $$
<Opt Declaration List> -> <Declaration List>
<Declaration List> -> <Declaration> ; <Declaration List'>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> integer
Token: Keyword Lexeme: integer
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: test_identifier
<IDS'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: ;
<Declaration List'> -> <Declaration List>
<Declaration List> -> <Declaration> ; <Declaration List'>
<Declaration> -> <Qualifier> <IDs>
<Qualifier> -> real
Token: Keyword Lexeme: real
<IDS> -> <Identifier> <IDS'>
Token: Identifier Lexeme: d_13d_d2
<IDS'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: ;
<Declaration List'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: $$
<Statement List> -> <Statement> <Statement List'>
<Statement> -> <While>
<While> -> while ( <Condition> ) <Statement> endwhile
Token: Keyword Lexeme: while
Token: Separator Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary'>
Token: Identifier Lexeme: fahr
<Primary'> -> <Empty>
<Empty> -> ε
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
<Relop> -> <=
Token: Operator Lexeme: <=
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Identifier> <Primary'>
Token: Identifier Lexeme: upper
<Primary'> -> <Empty>
<Empty> -> ε
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: )
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
Token: Identifier Lexeme: a
Token: Operator Lexeme: =
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Real>
Token: Real Lexeme: 23.00
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: ;
Token: Keyword Lexeme: endwhile
<Statement List'> -> <Statement List>
<Statement List> -> <Statement> <Statement List'>
<Statement> -> <Assign>
<Assign> -> <Identifier> = <Expression> ;
Token: Identifier Lexeme: d_13d_d2
Token: Operator Lexeme: =>
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Primary>
<Primary> -> <Real>
Token: Real Lexeme: 3.2
<TermPrime> -> <Empty>
<Empty> -> ε
<Expression Prime> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: ;
<Statement List'> -> <Empty>
<Empty> -> ε
Token: Separator Lexeme: $$
